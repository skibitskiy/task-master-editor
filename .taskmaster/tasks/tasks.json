{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Каркас Electron-приложения",
        "description": "Базовая структура main/preload/renderer, строгий TypeScript, безопасные флаги окна.",
        "details": "• Electron + TypeScript (strict) + Vite/webpack.\n• Настройки безопасности: contextIsolation: true, sandbox: true, nodeIntegration: false.\n• Логирование: electron-log.\n• Конфиг навигации наружу (allow-list для shell.openExternal).",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) Приложение стартует в dev одной командой и показывает окно. \n2) Prod-сборка запускается и поведение идентично dev. \n3) Проверка, что nodeIntegration=false, contextIsolation=true, sandbox=true. \n4) Внешние ссылки блокируются, кроме явно разрешённых.",
        "dependencies": []
      },
      {
        "id": 2,
        "title": "Контракты IPC и безопасность Preload",
        "description": "Единые каналы IPC и типизированный, минимальный API в preload.",
        "details": "• Каналы: workspace:select, file:read, file:write.\n• Валидация payload через zod/valibot.\n• contextBridge.exposeInMainWorld с минимальным API.",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) Все IPC-запросы/ответы валидируются и некорректные данные отклоняются с понятной ошибкой. \n2) Renderer не имеет прямого доступа к fs/process. \n3) API preload соответствует описанной спецификации (названия и сигнатуры).",
        "dependencies": [
          1
        ]
      },
      {
        "id": 3,
        "title": "Модель данных и глобальный стор",
        "description": "Типы Task и контейнера файла, единый стор, MRU последних путей, dirty-flags.",
        "details": "• Типы: Task, TasksFile ({ master: { tasks: Task[] } }).\n• React Context/Reducer или легковесный стор.\n• electron-store для настроек (MRU, предпочтения).",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) Парсинг валидного файла формирует корректное состояние. \n2) Частично битые поля не роняют UI — задачи с ошибками помечаются/игнорируются. \n3) Dirty-статусы корректно обновляются на уровне задачи и файла. \n4) MRU хранит и возвращает последний путь, если опция включена.",
        "dependencies": [
          1,
          2
        ]
      },
      {
        "id": 4,
        "title": "Валидация JSON и атомарная запись",
        "description": "Схема валидации tasks.json, запись через temp→fsync→rename, бэкап.",
        "details": "• Схема zod для TasksFile. \n• fs/promises: временный файл + fsync + атомарный rename. \n• Автобэкап и откат при сбое.",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) Невалидный JSON/схема — понятная ошибка и возможность выбрать другой файл. \n2) При сбое записи исходный файл остаётся цел. \n3) Бэкап доступен и может быть восстановлен. \n4) Успешная запись не теряет данные (проверка чтением).",
        "dependencies": [
          2,
          3
        ]
      },
      {
        "id": 5,
        "title": "UI-скелет: двухколоночный лейаут",
        "description": "Слева список задач, справа редактор; плейсхолдер при отсутствии выбора.",
        "details": "• @gravity-ui/uikit: Layout/Flex, Tabs, Toaster. \n• @gravity-ui/markdown-editor для правой панели. \n• Адаптив: при узком экране переключение вида.",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) При старте без выбранной задачи справа виден плейсхолдер. \n2) Лейаут устойчив к ресайзу окна. \n3) Toaster доступен из любой части renderer.",
        "dependencies": [
          1
        ]
      },
      {
        "id": 6,
        "title": "Обработка ошибок и устойчивость",
        "description": "Глобальные перехватчики ошибок, уведомления и неизбыточные логи.",
        "details": "• React ErrorBoundary, window.onerror/unhandledrejection. \n• Утилита notify() на базе @gravity-ui/uikit Toaster. \n• electron-log с маскированием PII.",
        "status": "done",
        "priority": "medium",
        "testStrategy": "1) Неуправляемые исключения не закрывают окно — пользователь видит понятный тост. \n2) Ошибки IPC маппятся в человекочитаемые сообщения. \n3) Логи пишутся и не содержат PII.",
        "dependencies": [
          1,
          5
        ]
      },
      {
        "id": 7,
        "title": "Качество и DX",
        "description": "ESLint/Prettier, unit-тесты для парсинга/сериализации, smoke E2E.",
        "details": "• ESLint + Prettier. \n• Vitest/Jest для юнитов (парсинг, сериализация). \n• Playwright (Electron) smoke: окно открывается, UI-скелет виден.",
        "status": "done",
        "priority": "medium",
        "testStrategy": "1) Линт без ошибок, автоформат работает. \n2) Юнит-тесты зелёные, покрытие парсинга/записи ≥80%. \n3) Smoke E2E подтверждает рендер списка и плейсхолдера.",
        "dependencies": [
          1
        ]
      },
      {
        "id": 8,
        "title": "Сборка и поставка",
        "description": "Конфигурация сборки, артефакты под целевые ОС, sourcemaps.",
        "details": "• electron-builder или Forge. \n• Env-профили, версионирование, генерация артефактов. \n• Sourcemaps для prod-диагностики.",
        "status": "done",
        "priority": "medium",
        "testStrategy": "1) Генерируется устанавливаемый пакет для целевой ОС. \n2) Prod-сборка запускается и повторяет UX dev-версии. \n3) Sourcemaps доступны для стека ошибок.",
        "dependencies": [
          1
        ]
      },
      {
        "id": 9,
        "title": "Стартовый выбор файла задач",
        "description": "Диалог выбора tasks.json при запуске с обработкой отмены.",
        "details": "• Electron dialog.showOpenDialog (file). \n• IPC: workspace:select.\n• Экран «Выберите файл задач» при отмене.",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) При старте отображается диалог выбора файла. \n2) Отмена — остаёмся на экране выбора без ошибок. \n3) Выбор валидного файла приводит к главному экрану.",
        "dependencies": [
          2,
          3,
          5
        ]
      },
      {
        "id": 10,
        "title": "Чтение и валидация tasks.json",
        "description": "Загрузка файла, проверка схемы и наполнение стора.",
        "details": "• IPC: file:read. \n• Валидация схемой zod. \n• Ошибки — через Toaster с понятным текстом.",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) Валидный файл корректно отображает список задач. \n2) Невалидный файл выдаёт тост с описанием и предлагает выбрать другой. \n3) Частичные ошибки не роняют приложение.",
        "dependencies": [
          9,
          4,
          3
        ]
      },
      {
        "id": 11,
        "title": "Список задач (левая панель)",
        "description": "Рендер id, title, status; сортировка по id; выбор активной задачи.",
        "details": "• @gravity-ui/uikit: List/Table, Badge для статуса. \n• Стабильная сортировка по id. \n• Заглушка «Задач нет» при пустом массиве.",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) Список отображается и отсортирован по id. \n2) Клик по задаче активирует её и подсвечивает. \n3) При пустом списке видна заглушка.",
        "dependencies": [
          5,
          10
        ]
      },
      {
        "id": 12,
        "title": "Плейсхолдер редактора",
        "description": "Правый блок остаётся пустым до выбора задачи.",
        "details": "• Типографика @gravity-ui/uikit для подсказки. \n• Tabs скрыты, пока нет активной задачи.",
        "status": "done",
        "priority": "medium",
        "testStrategy": "1) До выбора задачи отображается плейсхолдер. \n2) Вкладки не видны без активной задачи.",
        "dependencies": [
          5
        ]
      },
      {
        "id": 13,
        "title": "Табы полей задачи",
        "description": "Переключение между title, description, details над редактором.",
        "details": "• @gravity-ui/uikit Tabs. \n• По умолчанию активна description. \n• Отсутствующие поля скрываются.",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) Tabs отображают только доступные поля. \n2) Переключение вкладок не теряет несохранённые правки. \n3) По умолчанию активна вкладка description.",
        "dependencies": [
          5,
          11
        ]
      },
      {
        "id": 14,
        "title": "Редактирование контента",
        "description": "Title — однострочный ввод; description/details — Markdown-редактор.",
        "details": "• @gravity-ui/uikit TextInput для title. \n• @gravity-ui/markdown-editor для description и details. \n• Предпросмотр Markdown.",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) Изменения отражаются в сторе в реальном времени. \n2) Markdown редактируется и предварительно просматривается. \n3) Изменённые вкладки показывают индикатор несохранённости.",
        "dependencies": [
          13
        ]
      },
      {
        "id": 15,
        "title": "Сохранение файла",
        "description": "Явная кнопка «Сохранить», запись текущего состояния в tasks.json.",
        "details": "• Toolbar над редактором с кнопкой «Сохранить». \n• IPC: file:write. \n• Атомарная запись из задачи 4.",
        "status": "done",
        "priority": "high",
        "testStrategy": "1) Успешное сохранение — тост «Сохранено», все dirty-индикаторы сброшены. \n2) Ошибка записи — тост с причиной, данные в сторе не теряются. \n3) Повторное открытие файла отражает внесённые изменения.",
        "dependencies": [
          4,
          2,
          14
        ]
      },
      {
        "id": 16,
        "title": "Индикаторы несохранённых изменений",
        "description": "Отслеживание dirty-state на уровне задачи и файла.",
        "details": "• Маркеры «●» на вкладках и в списке.\n• Диалог подтверждения при выходе при наличии несохранённых изменений.\\\n• Использовать компонент Modal из Gravity-UI\n• Добавить в модалку подтверждения кнопки \"сохранить\", \"не сохранять\"\n\n```\nimport {useState} from 'react';\nimport {Button, Modal} from '@gravity-ui/uikit';\n\nconst [open, setOpen] = useState(false);\n\n<Button onClick={() => setOpen(true)}>Open Modal</Button>\n<Modal open={open} onClose={() => setOpen(false)}>\n    Content\n</Modal>\n```\n\nОписание пропсов модалки в таблице\n\n<table><thead><tr><th align=\"left\">Имя</th><th align=\"left\">Описание</th><th align=\"center\">Тип</th><th align=\"center\">Значение по умолчанию</th></tr></thead><tbody><tr><td align=\"left\">autoFocus</td><td align=\"left\">В открытом состоянии фокус будет установлен на первый интерактивный элемент в содержимом.</td><td align=\"center\"><code>boolean</code></td><td align=\"center\"><code>true</code></td></tr><tr><td align=\"left\">children</td><td align=\"left\">Любое содержимое React.</td><td align=\"center\"><code>React.ReactNode</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">className</td><td align=\"left\">HTML-атрибут <code>class</code> для корневого узла.</td><td align=\"center\"><code>string</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">container</td><td align=\"left\">DOM-элемент, в который монтируется компонент через <code>Portal</code>.</td><td align=\"center\"><code>HTMLElement</code></td><td align=\"center\"><code>document.body</code></td></tr><tr><td align=\"left\">contentClassName</td><td align=\"left\">Атрибут <code>class</code> в HTML для узла с содержимым.</td><td align=\"center\"><code>string</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">disableBodyScrollLock</td><td align=\"left\">Отключает блокировку прокрутки, пока модальное окно открыто.</td><td align=\"center\"><code>boolean</code></td><td align=\"center\"><code>false</code></td></tr><tr><td align=\"left\">disableEscapeKeyDown</td><td align=\"left\">Отключает закрытие при нажатии на клавишу <code>Esc</code>.</td><td align=\"center\"><code>boolean</code></td><td align=\"center\"><code>false</code></td></tr><tr><td align=\"left\">disableOutsideClick</td><td align=\"left\">Отключает закрытие элемента по клику вне его области.</td><td align=\"center\"><code>boolean</code></td><td align=\"center\"><code>false</code></td></tr><tr><td align=\"left\">disablePortal</td><td align=\"left\">Отключает использование <code>Portal</code></td><td align=\"center\"><code>boolean</code></td><td align=\"center\"><code>false</code></td></tr><tr><td align=\"left\">focusTrap</td><td align=\"left\">Включает фиксацию фокуса внутри элемента.</td><td align=\"center\"><code>boolean</code></td><td align=\"center\"><code>true</code></td></tr><tr><td align=\"left\">keepMounted</td><td align=\"left\">Компонент <code>Modal</code> не будет удален из DOM при скрытии.</td><td align=\"center\"><code>boolean</code></td><td align=\"center\"><code>false</code></td></tr><tr><td align=\"left\">onClose</td><td align=\"left\">Обработчик события закрытия <code>Modal</code>.</td><td align=\"center\"><code>Function</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">onEnterKeyDown</td><td align=\"left\">Обработчик события нажатия на клавишу <code>Enter</code>.</td><td align=\"center\"><code>Function</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">onEscapeKeyDown</td><td align=\"left\">Обработчик события нажатия на клавишу <code>Esc</code>.</td><td align=\"center\"><code>Function</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">onTransitionEnter</td><td align=\"left\">Обработчик начала анимации открытия.</td><td align=\"center\"><code>Function</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">onTransitionExit</td><td align=\"left\">Обработчик начала анимации закрытия.</td><td align=\"center\"><code>Function</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">onTransitionEntered</td><td align=\"left\">Обработчик завершения анимации открытия.</td><td align=\"center\"><code>Function</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">onTransitionExited</td><td align=\"left\">Обработчик завершения анимации закрытия.</td><td align=\"center\"><code>Function</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">onOutsideClick</td><td align=\"left\">Обработчик события клика вне элемента.</td><td align=\"center\"><code>Function</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">open</td><td align=\"left\">Управляет видимостью <code>Modal</code>.</td><td align=\"center\"><code>boolean</code></td><td align=\"center\"><code>false</code></td></tr><tr><td align=\"left\">qa</td><td align=\"left\">Атрибут для тестирования (<code>data-qa</code>).</td><td align=\"center\"><code>string</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">restoreFocusRef</td><td align=\"left\">Элемент, на который вернется фокус.</td><td align=\"center\"><code>React.RefObject</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">style</td><td align=\"left\">HTML-атрибут <code>style</code> для корневого узла.</td><td align=\"center\"><code>string</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">aria-label</td><td align=\"left\">HTML-атрибут <code>aria-label</code> для описания <code>Modal</code>.</td><td align=\"center\"><code>string</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">aria-labelledby</td><td align=\"left\">Идентификатор видимого элемента заголовка в <code>Modal</code>.</td><td align=\"center\"><code>string</code></td><td align=\"center\"></td></tr><tr><td align=\"left\">contentOverflow</td><td align=\"left\">Определяет, имеет ли <code>Modal</code> внутреннюю полосу прокрутки или увеличивается в размерах вместе с содержимым.</td><td align=\"center\"><code>visible</code> <code>auto</code></td><td align=\"center\"><code>visible</code></td></tr></tbody></table>\n",
        "status": "done",
        "priority": "medium",
        "testStrategy": "1) Любое изменение включает индикаторы на вкладке и в списке. \n2) Сохранение сбрасывает индикаторы. \n3) Попытка закрыть приложение с несохранёнными изменениями вызывает подтверждение.",
        "dependencies": [
          3,
          14,
          15
        ]
      },
      {
        "id": 17,
        "title": "Синхронизация списка и редактора",
        "description": "Живое обновление левой панели при редактировании title.",
        "details": "• Единый источник данных в renderer. \n• Мгновенный ререндер списка при изменении title активной задачи.",
        "status": "deferred",
        "priority": "medium",
        "testStrategy": "1) Изменение title сразу видно в списке. \n2) Текущая выборка и скролл не сбрасываются.",
        "dependencies": [
          11,
          14
        ]
      },
      {
        "id": 18,
        "title": "Меню «Файл» и хоткеи",
        "description": "Пункты «Открыть другой файл…», «Сохранить», «Выход» + шорткаты.",
        "details": "• Electron Menu, globalShortcut/accelerators. \n• Cmd/Ctrl+O, Cmd/Ctrl+S. \n• Переоткрытие файла — замена текущего документа и состояния.",
        "status": "done",
        "priority": "medium",
        "testStrategy": "1) «Открыть…» повторяет сценарий выбора и загружает новый файл. \n2) «Сохранить» активна только при dirty-state. \n3) Шорткаты работают в фокусе приложения.",
        "dependencies": [
          1,
          2,
          9,
          15
        ]
      },
      {
        "id": 19,
        "title": "Производительность списка задач",
        "description": "Плавный скролл 1–2 тыс. задач за счёт оптимизаций/виртуализации.",
        "details": "• Мемоизация элементов, batched updates. \n• При необходимости — лёгкая виртуализация списка.",
        "status": "done",
        "priority": "low",
        "testStrategy": "1) Скролл списка из 1000–2000 задач без заметных лагов на типовом ноутбуке. \n2) Стабильная сортировка и корректные выделения при прокрутке.",
        "dependencies": [
          11
        ]
      },
      {
        "id": 20,
        "title": "Режимы запуска и окружения",
        "description": "Единый UX в dev/prod, корректная работа переменных окружения.",
        "details": "• npm-скрипты для dev и prod. \n• Env-профили и чтение переменных. \n• Согласованность поведения с задачами выбора/редактирования/сохранения.",
        "status": "pending",
        "priority": "low",
        "testStrategy": "1) Dev и prod повторяют пользовательский сценарий от выбора файла до сохранения. \n2) Env-переменные читаются и влияют на конфиг ожидаемым образом.",
        "dependencies": [
          8
        ]
      },
      {
        "id": 21,
        "title": "Настройка показа модалки подтверждения при выходе",
        "description": "Настройка показа модалки подтверждения при выходе",
        "details": "- Добавить в модалку кнопку \"не спрашивать\"\n- Добавить в шапку списка задач кнопку с иконкой (import \\{Gear\\} from '@gravity-ui/icons'), которая будет открывать DropdownMenu из gravity-ui. В меню будет единственная кнопка – Не спрашивать о сохранении. Если пользователь когда-либо нажимал \"не спрашивать\", то этот пункт активируется.\n- Надо завести redux стейт и редюсеры для настроек.\n\n```\n<DropdownMenu\n    renderSwitcher={(props) => (\n        <Button {...props} view=\"flat\">\n            <Icon size={16} data={Bars} />\n        </Button>\n    )}\n    items={[\n        {\n            iconStart: <Icon size={16} data={Pencil} />,\n            action: () => console.log('Rename'),\n            text: 'Rename',\n        },\n        {\n            iconStart: <Icon size={16} data={TrashBin} />,\n            action: () => console.log('Delete'),\n            text: 'Delete',\n            theme: 'danger',\n        },\n    ]}\n/>\n```\n\n<table><thead><tr><th align=\"left\">Имя</th><th align=\"left\">Описание</th><th align=\"center\">Тип</th><th align=\"center\">Значение по умолчанию</th></tr></thead><tbody><tr><td align=\"left\"><code>items</code></td><td align=\"left\">Массив элементов. Вложенные массивы элементов представляют визуально разделенные группы.</td><td align=\"center\"><code>(DropdownMenuItem | DropdownMenuItem[])[] | []</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>data</code></td><td align=\"left\">Данные, которые передаются в действия, вызываемые из меню (это может быть полезно для контекстных меню).</td><td align=\"center\"><code>any</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>icon</code></td><td align=\"left\">Иконка дефолтного переключателя (<code>switcher</code>).</td><td align=\"center\"><code>React.ReactNode</code></td><td align=\"center\">Иконка многоточия.</td></tr><tr><td align=\"left\"><code>size</code></td><td align=\"left\">Применяется как к дефолтному <code>switcher</code>, так и к меню.</td><td align=\"center\"><code>'s' | 'm' | 'l' | 'xl'</code></td><td align=\"center\"><code>'m'</code></td></tr><tr><td align=\"left\"><code>disabled</code></td><td align=\"left\">Значение <code>true</code> для этого свойства отключает кнопку <code>switcher</code> и блокирует открытие меню.</td><td align=\"center\"><code>boolean</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>renderSwitcher</code></td><td align=\"left\">Функция рендеринга для контрола переключения меню.</td><td align=\"center\"><code>React.ReactNode</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>switcherWrapperClassName</code></td><td align=\"left\">Значение для свойства <code>className</code> родительского компонента <code>switcher</code>.</td><td align=\"center\"><code>string</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>defaultSwitcherProps</code></td><td align=\"left\">Свойства дефолтного <code>switcher</code>.</td><td align=\"center\"><code>ButtonProps</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>defaultSwitcherClassName</code></td><td align=\"left\">Значение для свойства <code>className</code> дефолтного <code>switcher</code>.</td><td align=\"center\"><code>string</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>menuProps</code></td><td align=\"left\">Переопределяет свойства выпадающего меню по умолчанию.</td><td align=\"center\"><code>MenuProps</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>popupProps</code></td><td align=\"left\">Переопределяет свойства всплывающего окна по умолчанию.</td><td align=\"center\"><code>PopupProps</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>open</code></td><td align=\"left\">Переключает видимость выпадающего меню.</td><td align=\"center\"><code>boolean</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>onOpenToggle</code></td><td align=\"left\">Вызывается при открытии или закрытии меню.</td><td align=\"center\"><code>() =&gt; void</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>onSwitcherClick</code></td><td align=\"left\">Вызывается при клике по переключателю.</td><td align=\"center\"><code>React.MouseEventHandler&lt;HTMLElement&gt;</code></td><td align=\"center\"></td></tr><tr><td align=\"left\"><code>hideOnScroll</code></td><td align=\"left\">Указывает, нужно ли скрывать меню при прокрутке родительского элемента.</td><td align=\"center\"><code>boolean</code></td><td align=\"center\"><code>true</code></td></tr><tr><td align=\"left\"><code>children</code></td><td align=\"left\">Пользовательский контент внутри всплывающего окна с меню.</td><td align=\"center\"><code>React.ReactNode</code></td><td align=\"center\"></td></tr></tbody></table>\n",
        "status": "pending",
        "priority": "low",
        "testStrategy": "",
        "dependencies": [
          16
        ]
      },
      {
        "id": 22,
        "title": "Добавить языки программирования для выбора в блоке Code",
        "description": "",
        "details": "",
        "status": "pending",
        "priority": "low",
        "testStrategy": "",
        "dependencies": [
          5
        ]
      },
      {
        "id": 23,
        "title": "Добавить режим GPT в markdown editor",
        "description": "##### Extensions / GPT\n\n## How to connect GPT extensions to editor\n\nFirst to integrate this extension, you need to use the following versions of the packages:\n\n    @gravity-ui/markdown-editor version 13.18.0 or higher\n\n\nFeatures:\n\n<img src=\"https://raw.githubusercontent.com/gravity-ui/markdown-editor/refs/heads/main/docs/assets/gifs/custom-prompt-preset-gpt.gif\" width=\"470\"/>\n\n\n<img src=\"https://raw.githubusercontent.com/gravity-ui/markdown-editor/refs/heads/main/docs/assets/gifs/prompt-preset-gpt.gif\" width=\"470\"/>\n\n### 1. Add extension usage and extensions props\n\n```ts\nimport React from 'react';\n\nimport {\n    gptExtension,\n    MarkdownEditorView,\n    useMarkdownEditor,\n    markupToolbarConfigs,\n    mGptExtension,\n} from '@gravity-ui/markdown-editor';\n\nexport const Editor: React.FC<EditorProps> = (props) => {\n    // add a plugin to the markup mode\n    const markupGptExtension = mGptExtension(gptWidgetProps);\n\n    const mdEditor = useMarkdownEditor({\n        // ...\n\n        markupConfig: {\n            extensions: markupGptExtension,\n        },\n\n        extraExtensions: (builder) =>\n            builder.use(\n                ...\n                // add GPT extension\n                gptExtension,\n                // The next step we show implementation gptWidgetProps\n                gptWidgetProps,\n            ),\n    });\n\n    // add a plugin to the markup toolbar mode\n    const mToolbarConfig = markupToolbarConfigs.mToolbarConfig;\n\n    mToolbarConfig.push([mGptToolbarItem]);\n\n    return <MarkdownEditorView\n        ...\n        editor={mdEditor}\n        markupToolbarConfig={mToolbarConfig}\n    />\n};\n```\n### 2. Implementation ```gptWidgetProps```\n\n```ts\nimport React from 'react';\nimport {type GptWidgetOptions} from '@gravity-ui/markdown-editor';\n\n// Your function to implement GPT response\nconst gptRequestHandler = async ({\n    markup,\n    customPrompt,\n    promptData,\n}: {\n    markup: string;\n    customPrompt?: string;\n    promptData: unknown;\n}) => {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    let gptResponseMarkup = markup;\n\n    if (customPrompt) {\n        gptResponseMarkup = markup + ` \\`enhanced with ${customPrompt}\\``;\n    } else if (promptData === 'do-uno-reverse') {\n        gptResponseMarkup = gptResponseMarkup.replace(/[\\wа-яА-ЯёЁ]+/g, (match) =>\n            match.split('').reverse().join(''),\n        );\n    } else if (promptData === 'do-shout-out') {\n        gptResponseMarkup = gptResponseMarkup.toLocaleUpperCase();\n    }\n\n    return {\n        rawText: gptResponseMarkup,\n    };\n};\n\nfunction renderAnswer(data: {rawText: string}) {\n    return <div>{data.rawText}</div>;\n}\n\nexport const gptWidgetProps: GptWidgetOptions = {\n    answerRender: renderAnswer,\n    customPromptPlaceholder: 'Ask Yandex GPT to edit the text highlighted text',\n    disabledPromptPlaceholder: 'Ask Yandex GPT to generate the text',\n    gptAlertProps: {\n        showedGptAlert: true,\n        onCloseGptAlert: () => {},\n    },\n    promptPresets: [\n        {\n            hotKey: 'control+3',\n            data: 'do-uno-reverse',\n            display: 'Use the uno card',\n            key: 'do-uno-reverse',\n        },\n        {\n            hotKey: 'control+4',\n            data: 'do-shout-out',\n            display: 'Make the text flashy',\n            key: 'do-shout-out',\n        },\n    ],\n    onCustomPromptApply: async ({markup, customPrompt, promptData}) => {\n        return gptRequestHandler({markup, customPrompt, promptData});\n    },\n    onPromptPresetClick: async ({markup, customPrompt, promptData}) => {\n        return gptRequestHandler({markup, customPrompt, promptData});\n    },\n    onTryAgain: async ({markup, customPrompt, promptData}) => {\n        return gptRequestHandler({markup, customPrompt, promptData});\n    },\n    onApplyResult: (markup) => {\n        // add your callback for apply GPT result text\n        console.log(markup);\n    },\n    onUpdate: (event) => {\n        if (event?.rawText) {\n            // add your callback for any text updates\n            console.log(event.rawText);\n        }\n    },\n    onLike: async () => {}, // function to track feedback for good\n    onDislike: async () => {}, // and bad GPT answers\n};\n```\n### 3. Add extension to menubar and toolbar and command menu config for editor\n\nAdd in tool bar\n\n```ts\nimport {\n    ...\n    wGptItemData,\n    wysiwygToolbarConfigs,\n} from '@gravity-ui/markdown-editor';\n\nimport {cloneDeep} from '@gravity-ui/markdown-editor/_/lodash';\n\nexport const Editor: React.FC<EditorProps> = (props) => {\n    ...\n    const wToolbarConfig = cloneDeep(wysiwygToolbarConfigs.wToolbarConfig);\n    wToolbarConfig.unshift([wGptItemData]);\n\n    ...\n\n    return <MarkdownEditorView\n        ...\n        wysiwygToolbarConfig={wToolbarConfig}\n        ...\n    />\n};\n```\nAdd in menu bar\n\n```ts\nexport const Editor: React.FC<EditorProps> = (props) => {\n    ...\n    const wSelectionMenuConfig = [[wGptItemData], ...wysiwygToolbarConfigs.wSelectionMenuConfig];\n\n    const mdEditor = useMarkdownEditor({\n        ...\n        extensionOptions: {\n            selectionContext: {config: wSelectionMenuConfig},\n        },\n        ...\n    })\n    ...\n};\n```\n\nAdd in command menu config (/)\n\n```ts\nexport const Editor: React.FC<EditorProps> = (props) => {\n    ...\n    const wCommandMenuConfig = wysiwygToolbarConfigs.wCommandMenuConfig // main commands\n    wCommandMenuConfig.unshift(wGptItemData); // add GPT command\n\n    const mdEditor = useMarkdownEditor({\n        ...\n        extensionOptions: {\n            ...\n            commandMenu: {actions: wCommandMenuConfig},\n        },\n    })\n    ...\n};\n```\n### 4. Done, You can use the extension!\n\nВelow is an example of all code in one place\n\n```ts\nimport React from 'react';\n\nimport {\n    gptExtension,\n    MarkdownEditorView,\n    wysiwygToolbarConfigs,\n    useMarkdownEditor,\n} from '@gravity-ui/markdown-editor';\nimport {cloneDeep} from '@gravity-ui/markdown-editor/_/lodash';\n\nimport {gptWidgetProps} from './gptWidgetProps';\n\nexport const Editor: React.FC<EditorProps> = (props) => {\n    const wToolbarConfig = cloneDeep(wysiwygToolbarConfigs.wToolbarConfig);\n    wToolbarConfig.unshift([wGptItemData]);\n\n    const wSelectionMenuConfig = [[wGptItemData], ...wysiwygToolbarConfigs.wSelectionMenuConfig];\n\n    const wCommandMenuConfig = wysiwygToolbarConfigs.wCommandMenuConfig // main commands\n    wCommandMenuConfig.unshift(wGptItemData); // add GPT command\n\n    const mdEditor = useMarkdownEditor({\n        // ...\n        extraExtensions: (builder) => {\n            builder.use(\n                ...\n                // Add GPT extension\n                gptExtension,\n                // How to make gptWidgetProps, we will tell you in the next chapter\n                gptWidgetProps,\n            );\n        },\n        extensionOptions: {\n            selectionContext: {config: wSelectionMenuConfig},\n            commandMenu: {actions: wCommandMenuConfig},\n        },\n    });\n\n    return <MarkdownEditorView\n        ...\n        wysiwygToolbarConfig={wToolbarConfig}\n        editor={mdEditor}\n        ...\n    />\n};\n```",
        "details": "Добавить плагин (https://preview.gravity-ui.com/md-editor/?path=/docs/docs-extensions-gpt--docs) и добавить меню для хранения api ключей. Подумать о секьюрности",
        "status": "done",
        "priority": "low",
        "testStrategy": "",
        "dependencies": [
          5,
          21
        ]
      },
      {
        "id": 24,
        "title": "Добавить чат с ИИ в приложение",
        "description": "",
        "details": "https://chatgpt.com/c/68c1ef76-5f80-8333-94aa-6501f90a5734",
        "status": "pending",
        "priority": "low",
        "testStrategy": "",
        "dependencies": [
          5,
          23
        ]
      },
      {
        "id": 25,
        "title": "Добавить недавние проекты в стартовый экран",
        "description": "",
        "details": "",
        "status": "done",
        "priority": "low",
        "testStrategy": "",
        "dependencies": [
          9
        ]
      },
      {
        "id": 26,
        "title": "Сделать заголовок задачи редактируемым",
        "description": "Убрать таб для изменения заголовка задачи и перенести логику изменения заголовка в шапку редактора",
        "details": "При клике на заголовок задачи в шапке, он должен превращаться в Input из gravity-ui. Заголовок должен сохраняться при потере фокуса или при клике на enter. При клике на escape, заголовок должен возвращаться к исходному значению. Если оставить поле пустым, то под ним должна появиться ошибка \"Название задачи не может быть пустым\".\n\nКомпонент: packages/renderer/src/components/editor-panel-header/ui.tsx\\\nInput из gravity-ui: size=m. Сверху и снизу добавь паддинг по 1px, чтобы высота инпута совпадала с высотой заголовка",
        "status": "done",
        "priority": "low",
        "testStrategy": "",
        "dependencies": [
          14
        ]
      },
      {
        "id": 27,
        "title": "Добавить возможность создания и выбора ветки",
        "description": "Добавить возможность создания и выбора ветки",
        "details": "",
        "status": "done",
        "priority": "high",
        "testStrategy": "",
        "dependencies": []
      },
      {
        "id": 28,
        "title": "Исправить механизм сохранения задач",
        "description": "Исправить механизм сохранения задач",
        "details": "",
        "status": "done",
        "priority": "high",
        "testStrategy": "",
        "dependencies": []
      },
      {
        "id": 29,
        "title": "Добавить возможность создавать новую задачу",
        "description": "Добавить возможность создавать новую задачу\n\nВ шапке TaskList есть кнопка с иконкой плюс\nПри нажатии на кнопку должна создаваться задача  в текущей ветке с id равным последнему id в ветке \\+ 1. Все остальные поля у таски пустые, кроме тайтла. В тайтле написано \"Новая задача\"",
        "details": "",
        "status": "done",
        "priority": "high",
        "testStrategy": "",
        "dependencies": [
          28
        ]
      },
      {
        "id": 30,
        "title": "Добавить в шапку списка текущую директорию",
        "description": "В шапке должен быть путь текущего файла.\nПусть путь будет обрезан слева и состоять из максимум 30 символов.\nШрифт мелкий, но не слишком. При наведении появляется тултип с полным путем (import \\{Popup\\} from '@gravity-ui/uikit').\n\n```\nconst [buttonElement, setButtonElement] = React.useState(null);\nconst [open, setOpen] = React.useState(false);\n\n<Button ref={setButtonElement} onClick={() => setOpen((prevOpen) => !prevOpen)}>\n  Toggle Popup\n</Button>\n<Popup anchorElement={buttonElement} open={open} placement=\"bottom\">\n  Content\n</Popup>\n```",
        "details": "",
        "status": "done",
        "testStrategy": "",
        "dependencies": []
      },
      {
        "id": 31,
        "title": "Добавить стейт кнопки редактор/предпросмотр в Redux Store. ",
        "description": "Добавить стейт кнопки редактор/предпросмотр из шапки редактора в Redux Store. Сделать так, чтоб он сохранял состояние при переходе между задачами\nПусть дефолтным значением для кнопки будет **предпросмотр**.",
        "details": "",
        "status": "done",
        "testStrategy": "",
        "dependencies": []
      },
      {
        "id": 32,
        "title": "Исправить сохранение недавних проектов",
        "description": "Ранее открытые проекты не сохраняются в недавних проектах и не отображаются в интерфейсе на стартовой страницы",
        "details": "",
        "testStrategy": "",
        "dependencies": []
      },
      {
        "id": 33,
        "title": "Починить работу горячих клавиш",
        "description": "Горячие клавиши для открытия задачи и сохранения задачи не всегда срабатывают. Они работают до определенного момента, затем перестают работать. Необходимо найти причину и исправить её.",
        "details": "",
        "status": "deferred",
        "testStrategy": "",
        "dependencies": []
      }
    ],
    "metadata": {
      "created": "2025-09-08T07:02:22.454Z",
      "updated": "2025-09-12T17:15:01.185Z",
      "description": "Tasks for master context"
    }
  }
}