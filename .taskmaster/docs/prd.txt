# TaskMaster Desktop — PRD v1

## Overview

**Что это:** кроссплатформенный десктоп‑редактор задач (Electron + React) для работы с локальным файлом `.task-master/tasks/tasks.json`.

**Для кого:** для соло‑девелоперов и небольших команд, кто хранит задачи в Git‑репо рядом с кодом и хочет удобный оффлайн‑редактор без сервера.

**Какую боль решает:**

* Быстрое редактирование задач и их подробностей (Markdown) в одном окне.
* Визуализация зависимостей с индикаторами статуса (✅/⏱️), чтобы видеть блокеры.
* Безопасная работа с файлом: валидация, бэкапы, отслеживание внешних изменений.

**Ценность:** Zero‑setup (только выбрать папку), единый источник правды — версионируемый `tasks.json`, мгновенный feedback‑цикл.

---

## Core Features

1. **Рабочая область**

   * **Что:** выбор корневой папки (workspace) → автоматическое чтение/создание `.task-master/tasks/tasks.json`.
   * **Зачем:** единый способ указать источник данных, «нулевой» порог входа.
   * **Как:** диалог выбора директории, проверка структуры, автосоздание при отсутствии.

2. **Список задач (левое меню)**

   * **Что:** прокручиваемый список с поиском/фильтрами (по статусу/приоритету), выделение активной.
   * **Зачем:** быстрый навигатор.
   * **Как:** рендер из массива, lightweight фильтры в памяти.

3. **Редактор задачи (правая панель)**

   * **Что:** редактирование всех полей `title`, `description`, `status`, `priority`, `dependencies`, `subtasks`, `details`, `testStrategy`.
   * **Зачем:** единое окно работы без контекст‑свитчей.
   * **Как:**

     * Простые поля — элементы @gravity-ui/uikit.
     * `details`/`testStrategy` — **Gravity UI Markdown Editor** с тулбаром/превью.
     * `dependencies` — multi‑select по ID с отображением индикаторов статуса.

4. **Статусы зависимостей**

   * **Что:** отображение для каждой зависимости: ✅ (done) / ⏱️ (не done) / ⚠️ (не найдена).
   * **Зачем:** быстро увидеть блокеры.
   * **Как:** вычисление по локальному списку задач.

5. **Сохранение, валидация, бэкап**

   * **Что:** запись в `tasks.json` с Zod‑валидацией и созданием `tasks.json.bak`.
   * **Зачем:** минимизация риска порчи данных.
   * **Как:** в main‑процессе перед записью.

6. **Вотчинг внешних изменений**

   * **Что:** если файл поменялся (git pull/ручное редактирование) — UI обновляется.
   * **Зачем:** консистентность при работе из нескольких инструментов.
   * **Как:** chokidar → событие в renderer.

7. **Автосейв / горячие клавиши**

   * **Что:** дебаунс‑автосейв; `Ctrl/Cmd+S` ручное сохранение.
   * **Зачем:** меньше потерянных правок.

---

## User Experience

### Персоны

* **Разработчик**: ведёт задачи в репозитории рядом с кодом, часто редактирует детали/пошаговые инструкции и использует локальный редактор без сервера.

### Ключевые флоу

1. **Первый запуск**: открыть приложение → выбрать папку → увидеть список задач → выбрать задачу → править поля → сохранить.
2. **Работа с зависимостями**: выбрать задачу → добавить/удалить ID → увидеть индикаторы статуса.
3. **Редактирование Markdown**: открыть `details`/`testStrategy` → писать/форматировать → предпросмотр в редакторе.
4. **Внешние изменения**: получить обновление → подтвердить перезагрузку/автоматически обновиться.

### UI/UX заметки

* Понятные пустые состояния («Выберите или создайте задачу»). UI‑kit: @gravity-ui/uikit.
* Фокус на скорость: минимальные клики, мгновенная обратная связь, не навязчивые тосты.
* Поиск/фильтры не блокируют набор текста.

---

# Technical Architecture

### Компоненты системы

* **Electron main**: диалоги, работа с ФС, валидатор, бэкап, вотчинг, IPC‑слой.
* **Preload (contextBridge)**: безопасная прокладка API в renderer.
* **Renderer (React)**: список/фильтры/редактор, Markdown Editor, состояние.

### Data models (TypeScript)

```ts
export type Status = 'pending' | 'done' | 'deferred';
export type Priority = 'high' | 'medium' | 'low';
export interface Subtask { id: number; title: string; status?: Status }
export interface Task {
  id: number;
  title: string;
  description: string;
  status: Status;
  dependencies: number[];
  priority: Priority;
  details: string;
  testStrategy: string;
  subtasks: Subtask[];
}
```

### IPC API (контракты)

* `workspace:select() → string|null`
* `tasks:load() → Task[]` (throw `WORKSPACE_NOT_SELECTED`)
* `tasks:save(tasks: Task[]) → true`
* Events: `tasks:external-updated(Task[])`, `tasks:error(string)`

### Валидация

* Zod‑схемы для `Task[]` на main‑процессе; отбрасываем доверие к renderer.

### Интеграции

* **Gravity UI Markdown Editor** для `details`/`testStrategy`.
* **Chokidar** для вотчинга.

### Инфраструктура

* Dev/build: `electron-vite` (Vite + TS), упаковка позже через `electron-builder`.
* Поддерживаемые ОС: macOS, Windows, Linux (x64/arm64 — по возможности).
* Хранение настроек (путь к последней workspace) — в `app.getPath('userData')` (JSON).

---

# Development Roadmap

### MVP (минимально полезное)

* Выбор рабочей папки и автосоздание структуры `.task-master/tasks/tasks.json` при отсутствии.
* Загрузка/рендер списка задач (без поиска/фильтров).
* Редактор задачи: все простые поля + Markdown‑редактор для `details`/`testStrategy`.
* Сохранение с валидацией и бэкапом.
* Отображение зависимостей с индикаторами статуса.
* Вотчинг внешних изменений и автообновление в UI.
* Горячие клавиши: `Ctrl/Cmd+S`.

### Этап 2 — Удобство

* Поиск/фильтры (статус/приоритет/строка).
* Автосейв с дебаунсом.
* Предупреждение/стратегия при конфликте (внешние изменения vs несохранённые правки).
* Визуальные бейджи/чипы статусов и приоритета в списке.

### Этап 3 — Надёжность и масштабирование

* Детектор циклических зависимостей и подсветка.
* Миграции схемы (версионирование `tasks.json`).
* Тесты: unit (валидация, парсинг, трансформации), e2e (Electron + Playwright).
* Пакетинг (dmg/exe/AppImage), автообновления (опционально).

### Этап 4 — Доп. возможности (опционально)

* Импорт/экспорт (JSON/CSV/Markdown отчёты).
* Библиотека шаблонов задач.
* Базовая диаграмма зависимостей (graph view).
* Набросок плагинов/хуков (генерация subtasks из Markdown‑чеклистов и т.п.).

---

# Logical Dependency Chain

1. **Фундамент:** структура проекта, IPC, выбор workspace, чтение/запись `tasks.json` + валидация.
2. **UI‑скелет:** список задач → просмотр одной задачи.
3. **Редактирование полей:** простые поля → Markdown `details`/`testStrategy`.
4. **Сохранение и бэкап:** ручное `Ctrl/Cmd+S` → дебаунс‑автосейв.
5. **Зависимости:** отображение индикаторов → multi‑select редактирование.
6. **Вотчинг внешних изменений:** автообновление списка/деталей.
7. **Удобства:** поиск/фильтры, бейджи, пустые состояния.
8. **Надёжность:** конфликты, циклы, миграции, тесты, пакетинг.

Цель: как можно быстрее получить «видимый и полезный» фронт — после п.2–3 уже можно пользоваться.

---

# Risks and Mitigations

* **Порча файла / невалидные данные** → валидация на main, бэкап перед записью, мягкие ошибки с подсказками.
* **Конфликты изменений** (внешний редакт vs несохранённые правки) → стратегия: предупреждать, предлагать перезагрузку/слияние.
* **Большие файлы** (сотни/тысячи задач) → виртуализированный список, ленивые вычисления индикаторов.
* **Кроссплатформенные нюансы путей/прав** → использовать `path`/диалоги Electron, аккуратная работа с правами записи.
* **Зависимость от сторонних библиотек** → зафиксированные версии, smoke‑тесты при обновлении.

---

# Appendix

## Схема Zod (концепт)

```ts
import {z} from 'zod';
const SubtaskSchema = z.object({ id: z.number(), title: z.string(), status: z.enum(['pending','done','deferred']).optional() });
const TaskSchema = z.object({
  id: z.number(),
  title: z.string(),
  description: z.string().default(''),
  status: z.enum(['pending','done','deferred']),
  dependencies: z.array(z.number()).default([]),
  priority: z.enum(['high','medium','low']).default('medium'),
  details: z.string().default(''),
  testStrategy: z.string().default(''),
  subtasks: z.array(SubtaskSchema).default([]),
});
export const TasksSchema = z.array(TaskSchema);
```

## Пример `tasks.json`

```json
[
  {
    "id": 1,
    "title": "Initialize Repo",
    "description": "Create a new repository, set up initial structure.",
    "status": "pending",
    "dependencies": [],
    "priority": "high",
    "details": "Use GitHub client ID/secret, handle callback, set session token.",
    "testStrategy": "Deploy and call endpoint to confirm 'Hello World' response.",
    "subtasks": [{"id": 1, "title": "Configure OAuth", "status": "pending"}]
  }
]
```

## Тест‑чеклист MVP

* Выбор папки без `.task-master` → структура создаётся, файл = `[]`.
* Загрузка существующего файла → список отображается, активная первая задача.
* Редактирование всех полей → сохранение → перезапуск → изменения на месте.
* Изменение файла извне → UI обновился/предупредил.
* Бэкап создан при каждом сохранении.

— Конец PRD v1 —
