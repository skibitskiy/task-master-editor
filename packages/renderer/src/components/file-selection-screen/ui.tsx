import { CircleXmarkFill, Clock, File as FileIcon } from '@gravity-ui/icons';
import { Button, Card, Flex, Icon, List, Spin, Text } from '@gravity-ui/uikit';
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';

import { removeFromMRU } from '../../redux/settingsSlice';
import type { AppDispatch, RootState } from '../../redux/store';
import { withIPCErrorHandling } from '../../utils/ipcErrorMapper';
import { notifyError } from '../../utils/notify';
import styles from './styles.module.css';

interface FileSelectionScreenProps {
  onFileSelected: (filePath: string) => void;
}

export const FileSelectionScreen: React.FC<FileSelectionScreenProps> = ({ onFileSelected }) => {
  const [isSelecting, setIsSelecting] = useState(false);
  const dispatch = useDispatch<AppDispatch>();
  const settingsState = useSelector((state: RootState) => state.settings);
  const recentPaths = settingsState.loaded ? settingsState.data.recentPaths : [];
  const prefs = settingsState.loaded
    ? (settingsState.data.preferences as Record<string, unknown> | undefined)
    : undefined;
  const mruEnabled = prefs?.mruEnabled ?? true;

  console.log('üîç FileSelectionScreen state:', {
    settingsLoaded: settingsState.loaded,
    recentPaths,
    mruEnabled,
    prefs,
  });

  const getProjectName = (filePath: string) => {
    const parts = filePath.split(/[/\\]/);
    const tasksIndex = parts.findIndex((part) => part === 'tasks.json');
    if (tasksIndex > 0) {
      return parts[tasksIndex - 1];
    }
    return parts[parts.length - 2] || '–ü—Ä–æ–µ–∫—Ç';
  };

  const handleSelectFile = async () => {
    setIsSelecting(true);

    try {
      const result = await withIPCErrorHandling(async () => {
        const response = await window.api?.workspace.select({
          type: 'file',
          multiple: false,
        });

        if (!response || response.paths.length === 0) {
          return null; // User cancelled
        }

        return response.paths[0];
      }, '–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á');

      if (result) {
        onFileSelected(result);
      }
    } catch (error) {
      notifyError('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞');
    } finally {
      setIsSelecting(false);
    }
  };

  const handleRecentFileSelect = (filePath: string) => {
    onFileSelected(filePath);
  };

  const handleDeleteRecentPath = async (pathToDelete: string, event: React.MouseEvent) => {
    event.stopPropagation(); // Prevent file selection when clicking delete
    console.log('üóëÔ∏è Trying to delete path:', pathToDelete);
    try {
      const result = await dispatch(removeFromMRU(pathToDelete));
      console.log('üóëÔ∏è Delete result:', result);
    } catch (error) {
      console.error('üóëÔ∏è Delete error:', error);
      notifyError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö');
    }
  };

  return (
    <Flex centerContent width="100%" height="100vh" direction="column" className={styles.container}>
      <Card view="outlined" type="container" size="l" className={styles.card}>
        <Flex direction="column" centerContent gap={6}>
          {/* Icon */}
          <div className={styles.iconContainer}>
            <FileIcon />
          </div>

          {/* Title */}
          <Text variant="header-2" className={styles.title}>
            –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–¥–∞—á
          </Text>

          {/* Description */}
          <Text variant="body-2" color="secondary" className={styles.description}>
            –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª tasks.json –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é Task Master CLI
          </Text>

          {/* Recent Projects */}
          {recentPaths.length > 0 && (
            <div className={styles.recentSection}>
              <Flex direction="row" alignItems="center" gap={2} className={styles.recentHeader}>
                <Icon data={Clock} size={16} />
                <Text variant="subheader-1">–ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã</Text>
              </Flex>
              <Card view="outlined" className={styles.recentList}>
                <List
                  filterable={false}
                  itemHeight={60}
                  itemsHeight={160}
                  items={recentPaths.slice(0, 5).map((path, index) => ({
                    id: index.toString(),
                    path,
                  }))}
                  renderItem={({ path }) => (
                    <Flex
                      direction="row"
                      alignItems="center"
                      gap={3}
                      className={styles.recentItem}
                      onClick={() => handleRecentFileSelect(path)}
                    >
                      <Icon data={FileIcon} size={16} />
                      <Flex direction="column" grow>
                        <Text variant="body-2">{getProjectName(path)}</Text>
                        <Text variant="caption-2" color="secondary">
                          {path}
                        </Text>
                      </Flex>
                      <div onClick={(event) => handleDeleteRecentPath(path, event)} className={styles.deleteButton}>
                        <Icon data={CircleXmarkFill} size={16} className={styles.deleteIcon} />
                      </div>
                    </Flex>
                  )}
                />
              </Card>
            </div>
          )}

          {/* Select button */}
          <Button
            view="action"
            size="l"
            onClick={handleSelectFile}
            disabled={isSelecting}
            className={styles.selectButton}
          >
            {isSelecting ? (
              <Flex className={styles.loadingContainer} justifyContent="center" alignItems="center">
                <Spin size="xs" />
              </Flex>
            ) : (
              <Icon data={FileIcon} size={18} />
            )}
            {isSelecting ? <Text>–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞...</Text> : <Text>–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª</Text>}
          </Button>

          {/* Help text */}
          <Text variant="caption-2" color="hint" className={styles.helpText}>
            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã tasks.json, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Task Master CLI
          </Text>
        </Flex>
      </Card>
    </Flex>
  );
};
